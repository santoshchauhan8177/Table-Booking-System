{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst dotenv = require('dotenv');\ndotenv.config(); // Load environment variables from .env file\n\nconst app = express();\nconst port = process.env.PORT || 5000; // Use port from .env or default to 5000\n\n// Body parser middleware\napp.use(bodyParser.json());\n\n// MongoDB connection setup\nmongoose.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.error('MongoDB connection error:', err));\n\n// MongoDB Schema and Model for Booking\nconst bookingSchema = new mongoose.Schema({\n  firstName: String,\n  lastName: String,\n  email: String,\n  phone: String,\n  date: String,\n  time: String,\n  guests: Number,\n  seatingPreference: String,\n  specialRequests: String\n});\nconst Booking = mongoose.model('Booking', bookingSchema);\n\n// POST route to create a booking\napp.post('/create-booking', async (req, res) => {\n  const {\n    firstName,\n    lastName,\n    email,\n    phone,\n    date,\n    time,\n    guests,\n    seatingPreference,\n    specialRequests\n  } = req.body;\n\n  // Validation\n  if (!firstName || !lastName || !email || !date || !time) {\n    return res.status(400).json({\n      message: 'Please provide required fields: firstName, lastName, email, date, time'\n    });\n  }\n  try {\n    const newBooking = new Booking({\n      firstName,\n      lastName,\n      email,\n      phone,\n      date,\n      time,\n      guests,\n      seatingPreference,\n      specialRequests\n    });\n    await newBooking.save(); // Save to MongoDB\n    return res.status(201).json({\n      message: 'Booking created successfully',\n      booking: newBooking\n    });\n  } catch (err) {\n    return res.status(500).json({\n      message: 'Error creating booking',\n      error: err\n    });\n  }\n});\n\n// GET route to retrieve a booking by ID\napp.get('/get-booking/:id', async (req, res) => {\n  const bookingId = req.params.id;\n  try {\n    const booking = await Booking.findById(bookingId); // Find booking by ID in MongoDB\n\n    if (!booking) {\n      return res.status(404).json({\n        message: 'Booking not found'\n      });\n    }\n    return res.status(200).json(booking);\n  } catch (err) {\n    return res.status(500).json({\n      message: 'Error fetching booking',\n      error: err\n    });\n  }\n});\n\n// DELETE route to delete a booking by ID\napp.delete('/delete-booking/:id', async (req, res) => {\n  const bookingId = req.params.id;\n  try {\n    const booking = await Booking.findByIdAndDelete(bookingId); // Find and delete booking by ID\n\n    if (!booking) {\n      return res.status(404).json({\n        message: 'Booking not found'\n      });\n    }\n    return res.status(200).json({\n      message: 'Booking deleted successfully'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      message: 'Error deleting booking',\n      error: err\n    });\n  }\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","bodyParser","mongoose","dotenv","config","app","port","process","env","PORT","use","json","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","bookingSchema","Schema","firstName","String","lastName","email","phone","date","time","guests","Number","seatingPreference","specialRequests","Booking","model","post","req","res","body","status","message","newBooking","save","booking","get","bookingId","params","id","findById","delete","findByIdAndDelete","listen"],"sources":["E:/assegement/a/src/BookingForm.js"],"sourcesContent":["\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst mongoose = require('mongoose');\r\nconst dotenv = require('dotenv');\r\ndotenv.config();  // Load environment variables from .env file\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 5000;  // Use port from .env or default to 5000\r\n\r\n// Body parser middleware\r\napp.use(bodyParser.json());\r\n\r\n// MongoDB connection setup\r\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n    .then(() => console.log('MongoDB connected'))\r\n    .catch(err => console.error('MongoDB connection error:', err));\r\n\r\n// MongoDB Schema and Model for Booking\r\nconst bookingSchema = new mongoose.Schema({\r\n    firstName: String,\r\n    lastName: String,\r\n    email: String,\r\n    phone: String,\r\n    date: String,\r\n    time: String,\r\n    guests: Number,\r\n    seatingPreference: String,\r\n    specialRequests: String\r\n});\r\n\r\nconst Booking = mongoose.model('Booking', bookingSchema);\r\n\r\n// POST route to create a booking\r\napp.post('/create-booking', async (req, res) => {\r\n    const { firstName, lastName, email, phone, date, time, guests, seatingPreference, specialRequests } = req.body;\r\n\r\n    // Validation\r\n    if (!firstName || !lastName || !email || !date || !time) {\r\n        return res.status(400).json({ message: 'Please provide required fields: firstName, lastName, email, date, time' });\r\n    }\r\n\r\n    try {\r\n        const newBooking = new Booking({\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            phone,\r\n            date,\r\n            time,\r\n            guests,\r\n            seatingPreference,\r\n            specialRequests\r\n        });\r\n\r\n        await newBooking.save();  // Save to MongoDB\r\n        return res.status(201).json({ message: 'Booking created successfully', booking: newBooking });\r\n    } catch (err) {\r\n        return res.status(500).json({ message: 'Error creating booking', error: err });\r\n    }\r\n});\r\n\r\n// GET route to retrieve a booking by ID\r\napp.get('/get-booking/:id', async (req, res) => {\r\n    const bookingId = req.params.id;\r\n\r\n    try {\r\n        const booking = await Booking.findById(bookingId);  // Find booking by ID in MongoDB\r\n\r\n        if (!booking) {\r\n            return res.status(404).json({ message: 'Booking not found' });\r\n        }\r\n\r\n        return res.status(200).json(booking);\r\n    } catch (err) {\r\n        return res.status(500).json({ message: 'Error fetching booking', error: err });\r\n    }\r\n});\r\n\r\n// DELETE route to delete a booking by ID\r\napp.delete('/delete-booking/:id', async (req, res) => {\r\n    const bookingId = req.params.id;\r\n\r\n    try {\r\n        const booking = await Booking.findByIdAndDelete(bookingId);  // Find and delete booking by ID\r\n\r\n        if (!booking) {\r\n            return res.status(404).json({ message: 'Booking not found' });\r\n        }\r\n\r\n        return res.status(200).json({ message: 'Booking deleted successfully' });\r\n    } catch (err) {\r\n        return res.status(500).json({ message: 'Error deleting booking', error: err });\r\n    }\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}